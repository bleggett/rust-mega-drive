#![no_std]
#![feature(array_chunks)]

use core::panic::PanicInfo;
use megadrive_sys::vdp::{VDP, Sprite, SpriteSize};
use megadrive_input::Controllers;

#[no_mangle]
pub fn run_game() -> ! {
    loop {
        let vdp = VDP::new();
        let mut controllers = Controllers::new();

        vdp.set_tiles(1, [
            // H
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x11, 0x11, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // E
            0x01, 0x11, 0x11, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x11, 0x11, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x11, 0x11, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // L
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x11, 0x11, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // O
            0x01, 0x11, 0x11, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x11, 0x11, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // W
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x01, 0x01, 0x00,
            0x01, 0x10, 0x11, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // R
            0x01, 0x10, 0x00, 0x00,
            0x01, 0x01, 0x10, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x10, 0x00,
            0x01, 0x11, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00,
            0x01, 0x00, 0x11, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // D
            0x01, 0x10, 0x00, 0x00,
            0x01, 0x01, 0x10, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x01, 0x10, 0x00,
            0x01, 0x10, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            // !
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ].array_chunks());

        let mut frame = 0u16;
        loop {
            controllers.update();
            let c1 = controllers.controller_state(0);

            // Write sprites
            let mut x = 200;
            let mut y = 200;

            if c1.map_or(false, |c| (c.get_down_raw() & 1) != 0) {
                y += 100;
            }

            let tiles = [1, 2, 3, 3, 4, 0, 5, 4, 6, 3, 7, 8, 9];
            let next = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0];

            let anim_frame = (frame >> 4) & 0x3f;

            for (idx, (i, next)) in tiles.iter().cloned().zip(next.iter().cloned()).enumerate() {
                let my_frame = (anim_frame + (idx as u16)) & 0x3f;
                let y_off = if my_frame >= 32 {
                    63 - my_frame
                } else {
                    my_frame
                };

                let mut sprite = Sprite::for_tile(i, SpriteSize::Size1x1);
                sprite.link = next;
                sprite.y = y + y_off;
                sprite.x = x;
                vdp.set_sprites(idx, [sprite].iter());
                x += 7;
            }

            frame = (frame + 1) & 0x7fff;
        }
    }
}

#[panic_handler]
#[no_mangle]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}
